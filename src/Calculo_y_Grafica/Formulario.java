/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Calculo_y_Grafica;

import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author George Herrada Farfán
 * @version 1.0
 * @github https://github.com/gherrada22
 */
//la clase formulario
public class Formulario extends javax.swing.JFrame {

    //creamos atributos  y un obejeto ,con el accederemos a la clase operaciones 
    double velocidadI, angulo, tiempo;
    Operaciones op = new Operaciones();
    //Estableciendo la posicion,el titulo y el tamaño;

    public Formulario() {
        initComponents();
        setLocationRelativeTo(null);
        setSize(1000, 900);
        setTitle("Proyecto final");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jLabel1 = new javax.swing.JLabel();
        Distanacia = new javax.swing.JButton();
        Resultado = new javax.swing.JTextField();
        VelocidadI = new javax.swing.JLabel();
        Angulo = new javax.swing.JLabel();
        Tiempo = new javax.swing.JLabel();
        AlturaMaxima = new javax.swing.JButton();
        DistanciaMaxima = new javax.swing.JButton();
        btnTVuelo = new javax.swing.JButton();
        Altura = new javax.swing.JButton();
        velocidad = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        Panel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Graficadora = new javax.swing.JButton();
        txtVelocidadI = new javax.swing.JTextField();
        txtAngulo = new javax.swing.JTextField();
        txtTiempo = new javax.swing.JTextField();
        result = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Movimiento Parabólico");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 10, 450, 52);

        Distanacia.setText("Distanacia");
        Distanacia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DistanaciaActionPerformed(evt);
            }
        });
        getContentPane().add(Distanacia);
        Distanacia.setBounds(620, 240, 100, 25);
        getContentPane().add(Resultado);
        Resultado.setBounds(220, 310, 510, 22);

        VelocidadI.setBackground(new java.awt.Color(0, 0, 0));
        VelocidadI.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        VelocidadI.setForeground(new java.awt.Color(255, 255, 255));
        VelocidadI.setText("Velocidad Inicial:");
        getContentPane().add(VelocidadI);
        VelocidadI.setBounds(30, 110, 180, 26);

        Angulo.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        Angulo.setForeground(new java.awt.Color(255, 255, 255));
        Angulo.setText("Angulo:");
        getContentPane().add(Angulo);
        Angulo.setBounds(120, 150, 100, 30);

        Tiempo.setBackground(new java.awt.Color(51, 0, 255));
        Tiempo.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        Tiempo.setForeground(new java.awt.Color(255, 255, 255));
        Tiempo.setText("Tiempo:");
        getContentPane().add(Tiempo);
        Tiempo.setBounds(110, 190, 90, 26);

        AlturaMaxima.setText("Altura Maxima ");
        AlturaMaxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlturaMaximaActionPerformed(evt);
            }
        });
        getContentPane().add(AlturaMaxima);
        AlturaMaxima.setBounds(435, 133, 119, 25);

        DistanciaMaxima.setText("Distanacia Maxima");
        DistanciaMaxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DistanciaMaximaActionPerformed(evt);
            }
        });
        getContentPane().add(DistanciaMaxima);
        DistanciaMaxima.setBounds(570, 130, 139, 25);

        btnTVuelo.setText("Tiempo de  Vuelo");
        btnTVuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTVueloActionPerformed(evt);
            }
        });
        getContentPane().add(btnTVuelo);
        btnTVuelo.setBounds(728, 133, 133, 25);

        Altura.setText("Altura");
        Altura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlturaActionPerformed(evt);
            }
        });
        getContentPane().add(Altura);
        Altura.setBounds(490, 240, 96, 25);

        velocidad.setText("Velocidad");
        velocidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                velocidadActionPerformed(evt);
            }
        });
        getContentPane().add(velocidad);
        velocidad.setBounds(750, 240, 100, 25);

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Calculos sin un tiempo ");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(520, 81, 230, 26);

        Panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 896, Short.MAX_VALUE)
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 446, Short.MAX_VALUE)
        );

        getContentPane().add(Panel);
        Panel.setBounds(50, 370, 900, 450);

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Calculos con el tiempo");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(536, 191, 225, 26);

        Graficadora.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        Graficadora.setText("Graficar");
        Graficadora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficadoraActionPerformed(evt);
            }
        });
        getContentPane().add(Graficadora);
        Graficadora.setBounds(790, 290, 160, 55);

        txtVelocidadI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVelocidadIActionPerformed(evt);
            }
        });
        getContentPane().add(txtVelocidadI);
        txtVelocidadI.setBounds(220, 110, 160, 22);
        getContentPane().add(txtAngulo);
        txtAngulo.setBounds(220, 150, 158, 22);
        getContentPane().add(txtTiempo);
        txtTiempo.setBounds(220, 190, 158, 22);

        result.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        result.setForeground(new java.awt.Color(255, 255, 255));
        result.setText("Resultado:");
        getContentPane().add(result);
        result.setBounds(90, 310, 120, 26);

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("m/s");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(390, 110, 27, 21);

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("G°");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(390, 150, 30, 21);

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Seg");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(390, 190, 41, 16);

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/beautiful-space-background-vector.jpg"))); // NOI18N
        getContentPane().add(fondo);
        fondo.setBounds(0, 0, 1040, 920);

        setBounds(0, 0, 1013, 905);
    }// </editor-fold>//GEN-END:initComponents

    private void txtVelocidadIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVelocidadIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVelocidadIActionPerformed
    //el boton para calcular la altura maxima
    private void AlturaMaximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlturaMaximaActionPerformed
        //try catch para validad si se ingresa un  texto
        try {
            //optenemos datos 
            velocidadI = Double.parseDouble(txtVelocidadI.getText());
            angulo = Double.parseDouble(txtAngulo.getText());
            //validamos si los valores cumplen los requisitos
            if (velocidadI > 0 & angulo < 90 & angulo > 0) {
                Resultado.setText(String.valueOf("El proyectil se encuentra  a " + op.calalturamaxima(velocidadI, angulo) + " Metros de altura"));
            } else {
                JOptionPane.showMessageDialog(null, "ERROR-Los datos ingrasados no consiven un movimiento parabolico");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Porfavor ingrese los datos correctamente");
            txtVelocidadI.setText(null);
            txtAngulo.setText(null);
            txtTiempo.setText(null);
            txtVelocidadI.requestFocus();

        }

    }//GEN-LAST:event_AlturaMaximaActionPerformed

    private void DistanciaMaximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DistanciaMaximaActionPerformed
        //try catch para validad si se ingresa un  texto
        try {
            //optenemos datos 
            velocidadI = Double.parseDouble(txtVelocidadI.getText());
            angulo = Double.parseDouble(txtAngulo.getText());
            //validamos si los valores cumplen los requisitos
            if (velocidadI > 0 & angulo < 90 & angulo > 0) {
                Resultado.setText(String.valueOf("El proyectil se encuentra  a " + op.caldistanciamaxima(velocidadI, angulo) + " Metros de distancia"));
            } else {
                JOptionPane.showMessageDialog(null, "ERROR-Los datos ingrasados no consiven un movimiento parabolico");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Porfavor ingrese los datos correctamente");
            txtVelocidadI.setText(null);
            txtAngulo.setText(null);
            txtTiempo.setText(null);
            txtVelocidadI.requestFocus();
        }

    }//GEN-LAST:event_DistanciaMaximaActionPerformed

    private void btnTVueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTVueloActionPerformed
        //try catch para validad si se ingresa un  texto
        try {
            //optenemos datos 
            velocidadI = Double.parseDouble(txtVelocidadI.getText());
            angulo = Double.parseDouble(txtAngulo.getText());
            //validamos si los valores cumplen los requisitos
            if (velocidadI > 0 & angulo < 90 & angulo > 0) {
                Resultado.setText(String.valueOf("El tiempo de vuelo es de " + op.tiempodevuelo(velocidadI, angulo) + " Segundos"));
            } else {
                JOptionPane.showMessageDialog(null, "ERROR-Los datos ingrasados no consiven un movimiento parabolico");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Porfavor ingrese los datos correctamente");
            txtVelocidadI.setText(null);
            txtAngulo.setText(null);
            txtTiempo.setText(null);
            txtVelocidadI.requestFocus();
        }

    }//GEN-LAST:event_btnTVueloActionPerformed

    private void AlturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlturaActionPerformed
        //try catch para validad si se ingresa un  texto
        try {
            //optenemos datos 
            velocidadI = Double.parseDouble(txtVelocidadI.getText());
            angulo = Double.parseDouble(txtAngulo.getText());
            tiempo = Double.parseDouble(txtTiempo.getText());
            //validamos si los valores cumplen los requisitos
            if (velocidadI > 0 & angulo < 90 & angulo > 0 & tiempo > 0) {
                if (tiempo <= op.tiempodevuelo(velocidadI, angulo)) {
                    Resultado.setText(String.valueOf("El proyectil esta a " + op.altura(velocidadI, angulo, tiempo) + " metros de altura"));
                } else {
                    JOptionPane.showMessageDialog(null, "ERROR-Ingreso un tiempo mayor  la tiempo de vuelo : Tiempo de vuelo =" + op.tiempodevuelo(velocidadI, angulo));
                }
            } else {
                JOptionPane.showMessageDialog(null, "ERROR-Los datos ingrasados no consiven un movimiento parabolico");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Porfavor ingrese los datos correctamente");
            txtVelocidadI.setText(null);
            txtAngulo.setText(null);
            txtTiempo.setText(null);
            txtVelocidadI.requestFocus();
        }


    }//GEN-LAST:event_AlturaActionPerformed

    private void GraficadoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficadoraActionPerformed
        //try catch para validad si se ingresa un  texto
        try {
            //creamos objetos de las clases de JFreeChart
            XYSeriesCollection oDataset = new XYSeriesCollection();
            XYSeries oSeries = new XYSeries(" ");
            //optenemos datos 
            velocidadI = Double.parseDouble(txtVelocidadI.getText());
            angulo = Double.parseDouble(txtAngulo.getText());
            tiempo = Double.parseDouble(txtTiempo.getText());
            //validamos si los valores cumplen los requisitos
            if (velocidadI > 0 & angulo < 90 & angulo > 0 & tiempo > 0) {
                //creamos una variable para dividir el tiempo en fracmentos que den la forma de la parabola 
                
                if (tiempo <= op.tiempodevuelo(velocidadI, angulo)) {
                    //creamos una variable para dividir el tiempo en fracmentos que den la forma de la parabola
                    double tiempoinicial = (tiempo/ 99);
                    //cremos array para cada eje
                    double[] x = new double[100];
                    double[] y = new double[100];
                    for (int i = 0; i < x.length; i++) {
                        x[i] = op.distancia(velocidadI, angulo, tiempoinicial * i);
                        y[i] = op.altura(velocidadI, angulo, tiempoinicial * i);
                        oSeries.add(x[i], y[i]);
                    }

                } else {

                    JOptionPane.showMessageDialog(null, "ERROR-Ingreso un tiempo mayor  la tiempo de vuelo : Tiempo de vuelo = " + op.tiempodevuelo(velocidadI, angulo) + " segundos ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "ERROR-Los datos ingrasados no consiven un movimiento parabolico");
            }

            oDataset.addSeries(oSeries);
            JFreeChart oChart = ChartFactory.createXYLineChart("GRAFICA PARABOLICA", "Eje x", "Eje y", oDataset, PlotOrientation.VERTICAL, true, false, false);
            ChartPanel oPanel = new ChartPanel(oChart);
            Panel.setLayout(new java.awt.BorderLayout());
            Panel.add(oPanel);
            Panel.validate();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,"Porfavor ingrese los datos correctamente");
            txtVelocidadI.setText(null);
            txtAngulo.setText(null);
            txtTiempo.setText(null);
            txtVelocidadI.requestFocus();
        }
    }//GEN-LAST:event_GraficadoraActionPerformed

    private void DistanaciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DistanaciaActionPerformed
        //try catch para validad si se ingresa un  texto
        try {
            //optenemos datos 
            velocidadI = Double.parseDouble(txtVelocidadI.getText());
            angulo = Double.parseDouble(txtAngulo.getText());
            tiempo = Double.parseDouble(txtTiempo.getText());
            //validamos si los valores cumplen los requisitos
            if (velocidadI > 0 & angulo < 90 & angulo > 0 & tiempo > 0) {
                if (tiempo <= op.tiempodevuelo(velocidadI, angulo)) {
                    Resultado.setText(String.valueOf("El proyectil esta a " + op.distancia(velocidadI, angulo, tiempo) + " metros de distancia"));
                } else {
                    JOptionPane.showMessageDialog(null, "ERROR-Ingreso un tiempo mayor  la tiempo de vuelo: Tiempo de vuelo = " + op.tiempodevuelo(velocidadI, angulo));
                }
            } else {
                JOptionPane.showMessageDialog(null, "ERROR-Los datos ingrasados no consiven un movimiento parabolico");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Porfavor ingrese los datos correctamente");
            txtVelocidadI.setText(null);
            txtAngulo.setText(null);
            txtTiempo.setText(null);
            txtVelocidadI.requestFocus();
        }
    }//GEN-LAST:event_DistanaciaActionPerformed

    private void velocidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_velocidadActionPerformed
        //try catch para validad si se ingresa un  texto
        try {
            //optenemos datos 
            velocidadI = Double.parseDouble(txtVelocidadI.getText());
            angulo = Double.parseDouble(txtAngulo.getText());
            tiempo = Double.parseDouble(txtTiempo.getText());
            //validamos si los valores cumplen los requisitos
            if (velocidadI > 0 & angulo < 90 & angulo > 0 & tiempo > 0) {
                if (tiempo <= op.tiempodevuelo(velocidadI, angulo)) {
                    Resultado.setText(String.valueOf("La velocidad del proyectil es de " + op.velocidad(velocidadI, angulo, tiempo) + " metros por segundo^2"));
                } else {
                    JOptionPane.showMessageDialog(null, "ERROR-Ingreso un tiempo mayor  la tiempo de vuelo: Tiempo de vuelo = " + op.tiempodevuelo(velocidadI, angulo));
                }
            } else {
                JOptionPane.showMessageDialog(null, "ERROR-Los datos ingrasados no consiven un movimiento parabolico");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Porfavor ingrese datos numericos");
            txtVelocidadI.setText(null);
            txtAngulo.setText(null);
            txtTiempo.setText(null);
            txtVelocidadI.requestFocus();
        }
    }//GEN-LAST:event_velocidadActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Altura;
    private javax.swing.JButton AlturaMaxima;
    private javax.swing.JLabel Angulo;
    private javax.swing.JButton Distanacia;
    private javax.swing.JButton DistanciaMaxima;
    private javax.swing.JButton Graficadora;
    private javax.swing.JPanel Panel;
    private javax.swing.JTextField Resultado;
    private javax.swing.JLabel Tiempo;
    private javax.swing.JLabel VelocidadI;
    private javax.swing.JButton btnTVuelo;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JLabel result;
    private javax.swing.JTextField txtAngulo;
    private javax.swing.JTextField txtTiempo;
    private javax.swing.JTextField txtVelocidadI;
    private javax.swing.JButton velocidad;
    // End of variables declaration//GEN-END:variables
}
